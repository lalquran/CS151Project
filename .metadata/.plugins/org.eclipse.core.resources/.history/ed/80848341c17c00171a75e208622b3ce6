import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import sun.misc.GC;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.GregorianCalendar;


public class SimpleCalendarFrame extends JFrame implements ChangeListener {

	private CalendarController eventController;
	private CalendarModel CalendarModel;
	//day view is the right side of the panel
	private DayView DayView;
	private MonthView MonthView;
	private FourDayView FourDayView;
	private AgendaView AgendaView;
	final JPanel rightPanel;
	private JButton todayButton;
	private JPanel lastView = new JPanel();
	public JPanel rightView = new JPanel();


	/**
	 * CalendarFrame constructor creates a CalendarFrame object
	 *
	 */
	public SimpleCalendarFrame() throws IOException
	{
		todayButton = new JButton("Today");
		//has the day view
		CalendarModel = new CalendarModel();

		DayView = new DayView(CalendarModel);
		FourDayView = new FourDayView(CalendarModel);
		rightPanel = new JPanel(new BorderLayout());
		JPanel rightChoicePanel = new JPanel(new FlowLayout());

		JButton dayChoice = new JButton("Day");
		JButton weekChoice = new JButton("Week");
		JButton monthChoice = new JButton("Month");
		JButton fourDayChoice = new JButton("4 Days");
		JButton agendaChoice = new JButton("Agenda");
		rightChoicePanel.add(dayChoice);
		rightChoicePanel.add(weekChoice);
		rightChoicePanel.add(monthChoice);
		rightChoicePanel.add(fourDayChoice);
		rightChoicePanel.add(agendaChoice);
		rightPanel.add(rightChoicePanel, BorderLayout.NORTH);

		CalendarModel.addChangeListener(this);

		eventController = new CalendarController(CalendarModel);


		eventController.setDayView(DayView);
		eventController.setFourDayView(FourDayView);

		final CalendarView calendar = new CalendarView(eventController, CalendarModel);
		DayView.setCalendar(calendar);
		eventController.setLittleCalendar(calendar);
		MonthView = new MonthView(eventController,CalendarModel, calendar);
		eventController.setMonthView(MonthView);
		
		AgendaView = new AgendaView(CalendarModel);
        eventController.setAgendaView(AgendaView);
		


		JPanel left = new JPanel();
		left.setLayout(new BorderLayout());

		JPanel p = new JPanel(new FlowLayout());
		p.add(calendar);


		calendar.setPreferredSize(new Dimension(300, 300));

		left.add(p, BorderLayout.CENTER);
		left.add(todayButton, BorderLayout.NORTH);
		setLayout(new BorderLayout());
		add(left, BorderLayout.WEST);
		add(rightPanel, BorderLayout.CENTER);
		setTitle("CALENDAR");

		rightPanel.add(DayView, BorderLayout.CENTER);
		rightPanel.validate();
		eventController.getDayView().view(eventController.getYear(), eventController.getMonth(), eventController.getDay());
		rightPanel.repaint();

	

		todayButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				System.out.println("TODAY");
				GregorianCalendar today = new GregorianCalendar();
				if(DayView.currentView){		
					DayView.view(today.get(GregorianCalendar.YEAR), today.get(GregorianCalendar.MONTH), today.get(GregorianCalendar.DAY_OF_MONTH));		
				}
				else{
					DayView.currentView = true;
					MonthView.currentView = false;
					FourDayView.currentView = false;
					eventController.setCalendar(today.get(GregorianCalendar.YEAR), today.get(GregorianCalendar.MONTH), today.get(GregorianCalendar.DAY_OF_MONTH));
					DayView.viewToday();
					
					rightPanel.remove(rightView);
					rightPanel.add(DayView, BorderLayout.CENTER);
					add(rightPanel);

					lastView = rightView;
					rightView = DayView;

					rightPanel.validate();
					rightPanel.repaint();
				}
				eventController.currentDate();
				calendar.month();
			}
		});

		dayChoice.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				DayView.currentView = true;
				MonthView.currentView = false;
				FourDayView.currentView = false;
				AgendaView.currentView = false;

				rightPanel.remove(rightView);
				rightPanel.add(DayView, BorderLayout.CENTER);
				add(rightPanel);

				lastView = rightView;
				rightView = DayView;

				rightPanel.validate();
				rightPanel.repaint();
			}
		});
		monthChoice.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				rightPanel.remove(rightView);
				DayView.currentView = false;
				FourDayView.currentView = false;
				MonthView.currentView = true;
				AgendaView.currentView = false;

				rightPanel.add(MonthView, BorderLayout.CENTER);
				add(rightPanel);
				lastView = rightView;
				rightView = MonthView;
				rightPanel.validate();
				rightPanel.repaint();

			}
		});
		fourDayChoice.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				rightPanel.remove(rightView);
				DayView.currentView = false;
				MonthView.currentView = false;
				FourDayView.currentView = true;
				AgendaView.currentView = false;
				rightPanel.add(FourDayView, BorderLayout.CENTER);
				add(rightPanel);
				lastView = rightView;
				rightView = FourDayView;
				rightPanel.validate();
				rightPanel.repaint();	
				FourDayView.view(eventController.getYear(), eventController.getMonth(), eventController.getDay());



			}
		});
		
		agendaChoice.addActionListener(new ActionListener(){
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			DayView.currentView = false;
				MonthView.currentView = false;
				FourDayView.currentView = false;
				AgendaView.currentView = true;
				
    			rightPanel.remove(rightView);
    			rightPanel.add(AgendaView, BorderLayout.CENTER);
    			add(rightPanel);
    			lastView = rightView;
    			rightView = AgendaView;
    			String sYear, sMonth, sDay, eYear, eMonth, eDay;
    			sYear = JOptionPane.showInputDialog("Please Provide a Range for the agenda. Whats's the range's start year? ");
    			sMonth = JOptionPane.showInputDialog("Start Month? ");
    			sDay = JOptionPane.showInputDialog("Start Day? ");
    			eYear = JOptionPane.showInputDialog("End Year? ");
    			eMonth = JOptionPane.showInputDialog("End Month? ");
    			eDay = JOptionPane.showInputDialog("End Day? ");
    			AgendaView.setStartYear(Integer.parseInt(sYear));
    	        AgendaView.setStartMonth(Integer.parseInt(sMonth));
    	        AgendaView.setStartDay(Integer.parseInt(sDay));
    	        AgendaView.setEndYear(Integer.parseInt(eYear));
    	        AgendaView.setEndMonth(Integer.parseInt(eMonth));
    	        AgendaView.setEndDay(Integer.parseInt(eDay));
    			AgendaView.view(eventController.getYear(), eventController.getMonth(), eventController.getDay());
    			rightPanel.validate();
    			repaint();
    		}
        });



	}



	/**
	 * stateChanged() repaints ViewOption
	 * @param: CalendarModel
	 */
	public void stateChanged(ChangeEvent e) 
	{
		rightPanel.remove(lastView);
		rightPanel.add(rightView, BorderLayout.CENTER);
		rightPanel.validate();
		rightPanel.repaint();
		this.repaint();
	}
}
