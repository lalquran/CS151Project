import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.TreeMap;

/**
 * CalendarView class displays the GUI calendar and provides
 * functional buttons related to Calendar
 */
public class MonthView extends JPanel {
	
	
	/////////////////////////////
	////View option for the//////
	////right side of the screen//
	/////////////////////////////
	

	private CalendarView calendarView;
    private CalendarController eventController;
    private JPanel month;
    private ArrayList<JLabel> days;
    private JLabel Heading;
    private ArrayList<JLabel> weeks;
    public String option = "MonthView";
    public final static String[] months = {
        "January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"
    };

    /**
     * CalendarView constructor with controller and model parameters
     * @param: controller, events
     */
    MonthView(CalendarController controller, CalendarModel events, CalendarView view)
    {
    	calendarView = view;
        eventController = controller;

        month = new JPanel();
        month.setLayout(new GridLayout(0, 7));
        days = new ArrayList<JLabel>();
        Heading = new JLabel();
    
        weeks = new ArrayList<JLabel>();

        weeks.add(new JLabel("Su", JLabel.CENTER));
        weeks.add(new JLabel("M", JLabel.CENTER));
        weeks.add(new JLabel("T", JLabel.CENTER));
        weeks.add(new JLabel("W", JLabel.CENTER));
        weeks.add(new JLabel("T", JLabel.CENTER));
        weeks.add(new JLabel("F", JLabel.CENTER));
        weeks.add(new JLabel("S", JLabel.CENTER));

        setLayout(new BorderLayout());
        
     
      
        
        add(month, BorderLayout.CENTER);
        month();
    }

   /**
    * month() creates the GUI month view
    */
    public void month() {
        ArrayList<String> d = calendar();
        days.clear();
        month.removeAll();

        for (String s : d) {
            if (s.contains("*")) {
                JLabel tempL = new JLabel(s.substring(1), JLabel.CENTER);
                days.add(tempL);
            } else {

                if (Integer.parseInt(s) == eventController.calendar().get(Calendar.DATE))
                {
                	int a = JLabel.CENTER;
                    JLabel tempL = new JLabel(s, a);
                    tempL.setBorder(BorderFactory.createLineBorder(Color.gray));
                    days.add(tempL);

                } else {
                	
                    JLabel tempL = new JLabel(s, JLabel.CENTER);
                    Font f = tempL.getFont();
                    days.add(tempL);
                }
            }
        }
        for (JLabel a : weeks) {
            month.add(a);
        }

        for (JLabel b : days) {
            b.setOpaque(true);
            b.setBackground(Color.white);
            month.add(b);
        }

        Heading.setText(months[eventController.getMonth()] + " " + eventController.getYear());
        day();
        month.validate();
        month.repaint();
    }

   /**
    * calendar() accounts for empty days of a particular month
    * @return array list
    */
    private ArrayList<String> calendar() {

        ArrayList<String> array = new ArrayList<>();
        int c = eventController.getDay();
        GregorianCalendar calendar = eventController.calendar();

        GregorianCalendar k = new GregorianCalendar(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), 1);
        int blanks = k.get(Calendar.DAY_OF_WEEK)-1;
        for (int i = 0; i < blanks; i++) {
            array.add("*");
        }

        int num = calendar.getActualMaximum(GregorianCalendar.DAY_OF_MONTH);
        for (int i = 1; i <= num; i++) {
            array.add(String.valueOf(i));
        }

        int b = ((7-( array.size() % 7)) == 7) ? 0 : 7-( array.size() % 7);
    	for(int i =0; i< b; i++)
        {
    		array.add("*");
        }
        calendar.set(GregorianCalendar.DAY_OF_MONTH, c);
        return array;
    }

    /**
     * actionListener for incrementing/decrementing the day view
     * @param button
     
    private void addButtonActionListener(final JButton button) {
        button.addActionListener(
                new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            	
                if (button.getText().equals("<"))
                {
                    eventController.getLastDay();
                    eventController.get().view(eventController.getYear(), eventController.getMonth(), eventController.getDay());
                }
                else 
                {
                    eventController.getUpcomingDay();
                    eventController.get().view(eventController.getYear(), eventController.getMonth(), eventController.getDay());
                }
                month();
            }
        });
    }
*/
    /**
     * day() helps month populate calendar as well as highlights days which have an event
     */
    public void day() {
    	
        int month = eventController.getMonth();
        int year = eventController.getYear();
        
        for (final JLabel a : days) 
        {
            final int m = month;
            final int y = year;


            if(a.getText().matches("\\d+"))
        	{

                TreeMap<String, Event> events =  eventController.get().getModel().getMyEvents(eventController.date2MMYYDD((m+1)+"/"+a.getText()+"/"+y));
                if(events!=null)
                	if(events.size() != 0)
                		a.setBackground(Color.yellow);
                else
                	a.setBackground(Color.white);

            a.addMouseListener(
                    new MouseAdapter() {
               
                @Override
                public void mouseClicked(MouseEvent e) {
                	eventController.setCalendar(y, m, Integer.parseInt(a.getText()));
                	month();
                	eventController.get().view(y, m, Integer.parseInt(a.getText()));
                }

                
                @Override
                public void mouseEntered(MouseEvent e) {
                }
                @Override
                public void mouseExited(MouseEvent e) {

                }
            });
        }
        }
    }

    
    
    public void changePrevNextButtons(){
    	calendarView.previousDayButton.removeAll();
    	calendarView.nextDayButton.removeAll(); 
    	
    	calendarView.previousDayButton.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				eventController.getLastMonth();
                eventController.get().view(eventController.getYear(), eventController.getMonth(), eventController.getDay());
			}
        	
        });
    	calendarView.nextDayButton.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				calendarView.eventController.getUpcomingMonth();
                calendarView.eventController.get().view(eventController.getYear(), eventController.getMonth(), eventController.getDay());
			}
        	
        });
    }

}

