import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.TreeMap;

/**
 * CalendarView class displays the GUI calendar and provides
 * functional buttons related to Calendar
 */
public class CalendarView extends JPanel {


	////////////////////////////
	////View for the left side// 
	///////of the screen////////
	////////////////////////////


	//****class does not hold the day view****//

	public CalendarController eventController;
	private JPanel month;
	private ArrayList<JLabel> days;
	private JLabel Heading;
	private ArrayList<JLabel> weeks;
	public JButton previousDayButton;
	public JButton nextDayButton;
	private JButton createButton;
	private JButton quitButton;
	private JButton deleteButton;
	public JPanel changePanel = new JPanel(new FlowLayout());

	public final static String[] months = {
			"January", "February", "March", "April", "May", "June",
			"July", "August", "September", "October", "November", "December"
	};

	/**
	 * CalendarView constructor with controller and model parameters
	 * @param: controller, events
	 */
	CalendarView(CalendarController controller, final CalendarModel events)
	{
		eventController = controller;
		month = new JPanel();
		month.setLayout(new GridLayout(0, 7));
		days = new ArrayList<JLabel>();
		Heading = new JLabel();

		previousDayButton = new JButton("<");
		addButtonActionListener(previousDayButton);
		nextDayButton = new JButton(">");
		addButtonActionListener(nextDayButton);


		createButton = new JButton("CREATE EVENT");
		createButton.setBackground(Color.BLUE);
		createButton.setForeground(Color.WHITE);
		createButton.setOpaque(true);
		createButton.setBorderPainted(false);

		quitButton = new JButton("Quit Calendar");
		quitButton.setBackground(Color.RED);
		quitButton.setForeground(Color.BLACK);
		quitButton.setOpaque(true);
		quitButton.setBorderPainted(false);

		deleteButton = new JButton("DELETE EVENT");
		deleteButton.setBackground(Color.DARK_GRAY);
		deleteButton.setForeground(Color.WHITE);
		deleteButton.setOpaque(true);
		deleteButton.setBorderPainted(false);


		/**
		 * actionListener for quit button
		 */
		quitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				CalendarModel.saveEventsToTxtFile();
				System.exit(0);	
			}
		});

		/**
		 * actionListener for create button
		 */
		createButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				CreateEventView m = new CreateEventView(events, eventController);
				m.setSize(550, 200);
				Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
				int a = d.width;
				int b = d.height;
				m.setLocation(a/2-m.getSize().width/2, b/2-m.getSize().height/2);
				//repaints
				month();
				eventController.get().view(eventController.getYear(), eventController.getMonth(), eventController.getDay());;

			}
		});


		/**
		 * actionListener for delete button
		 */
		deleteButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e){
				CalendarModel.deleteEvent();
				//repaints
				month();
				eventController.get().view(eventController.getYear(), eventController.getMonth(), eventController.getDay());;
			}
		});

		changePanel.add(previousDayButton);
		changePanel.add(nextDayButton);

		weeks = new ArrayList<JLabel>();

		weeks.add(new JLabel("Su", JLabel.CENTER));
		weeks.add(new JLabel("M", JLabel.CENTER));
		weeks.add(new JLabel("T", JLabel.CENTER));
		weeks.add(new JLabel("W", JLabel.CENTER));
		weeks.add(new JLabel("T", JLabel.CENTER));
		weeks.add(new JLabel("F", JLabel.CENTER));
		weeks.add(new JLabel("S", JLabel.CENTER));

		setLayout(new BorderLayout());

		JPanel tempP = new JPanel(new FlowLayout());
		tempP.add(createButton);
		tempP.add(deleteButton);

		JPanel topP = new JPanel(new BorderLayout());
		topP.add(tempP, BorderLayout.NORTH);
		topP.add(Heading, BorderLayout.WEST);
		topP.add(changePanel, BorderLayout.EAST);
		topP.add(quitButton, BorderLayout.SOUTH);

		add(topP, BorderLayout.NORTH);
		add(month, BorderLayout.CENTER);
		month();
	}

	/**
	 * month() creates the GUI month view
	 */
	public void month() {
		ArrayList<String> d = calendar();
		days.clear();
		month.removeAll();

		for (String s : d) {
			if (s.contains("*")) {
				JLabel tempL = new JLabel(s.substring(1), JLabel.CENTER);
				days.add(tempL);
			} else {

				if (Integer.parseInt(s) == eventController.calendar().get(Calendar.DATE))
				{
					int a = JLabel.CENTER;
					JLabel tempL = new JLabel(s, a);
					tempL.setBorder(BorderFactory.createLineBorder(Color.gray));
					days.add(tempL);


				} else {

					JLabel tempL = new JLabel(s, JLabel.CENTER);
					Font f = tempL.getFont();
					days.add(tempL);
				}
			}
		}
		for (JLabel a : weeks) {
			month.add(a);
		}

		for (JLabel b : days) {
			b.setOpaque(true);
			b.setBackground(Color.white);
			month.add(b);
		}

		Heading.setText(months[eventController.getMonth()] + " " + eventController.getYear());
		day();
		month.validate();
		month.repaint();
	}

	/**
	 * calendar() accounts for empty days of a particular month
	 * @return array list
	 */
	private ArrayList<String> calendar() {

		ArrayList<String> array = new ArrayList<>();
		int c = eventController.getDay();
		GregorianCalendar calendar = eventController.calendar();

		GregorianCalendar k = new GregorianCalendar(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), 1);
		int blanks = k.get(Calendar.DAY_OF_WEEK)-1;
		for (int i = 0; i < blanks; i++) {
			array.add("*");
		}

		int num = calendar.getActualMaximum(GregorianCalendar.DAY_OF_MONTH);
		for (int i = 1; i <= num; i++) {
			array.add(String.valueOf(i));
		}

		int b = ((7-( array.size() % 7)) == 7) ? 0 : 7-( array.size() % 7);
		for(int i =0; i< b; i++)
		{
			array.add("*");
		}
		calendar.set(GregorianCalendar.DAY_OF_MONTH, c);
		return array;
	}



	/**
	 * day() helps month populate calendar as well as highlights days which have an event
	 */
	public void day() {

		int month = eventController.getMonth();
		int year = eventController.getYear();

		for (final JLabel a : days) 
		{
			final int m = month;
			final int y = year;


			if(a.getText().matches("\\d+"))
			{

				TreeMap<String, Event> events =  eventController.get().getModel().getMyEvents(eventController.date2MMYYDD((m+1)+"/"+a.getText()+"/"+y));
				if(events!=null)
					if(events.size() != 0)
						a.setBackground(Color.yellow);
					else
						a.setBackground(Color.white);

				a.addMouseListener(
						new MouseAdapter() {

							@Override
							public void mouseClicked(MouseEvent e) {
								eventController.setCalendar(y, m, Integer.parseInt(a.getText()));
								month();
								eventController.get().view(y, m, Integer.parseInt(a.getText()));
							}
							
							@Override
							public void mouseEntered(MouseEvent e) {
								if(events!=null)
									if(events.size() == 0)
										a.setBackground(Color.GRAY);
							}
							@Override
							public void mouseExited(MouseEvent e) {
								if(events!=null)
									if(events.size() == 0)
										a.setBackground(Color.WHITE);
									else
										a.setBackground(Color.YELLOW);
								else
									a.setBackground(Color.WHITE);
								
									
										
							}
						});
			}
		}
	}

	/**
	 * actionListener for incrementing/decrementing the day view
	 * @param button
	 */
	private void addButtonActionListener(final JButton button) {

		button.addActionListener(
				new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {

						if (button.getText().equals("<"))
						{
							eventController.getLastDay();
							eventController.get().view(eventController.getYear(), eventController.getMonth(), eventController.getDay());
							month();
						}
						else 
						{
							eventController.getUpcomingDay();
							eventController.get().view(eventController.getYear(), eventController.getMonth(), eventController.getDay());
						month();
						}
						
					}
				});
	}

}

